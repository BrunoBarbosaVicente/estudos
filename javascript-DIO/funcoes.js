//  As fun√ß√µes podem receber e retornar informa√ß√µes. Elas tamb√©m possibilitam a reutiliza√ß√£o do c√≥digo, mantendo-o limpo e organizado, j√° que podem ser executadas quantas vezes for necess√°rio.

 /* estrutura de uma fun√ß√£o -> function nomeDaFuncao() {
   bloco de c√≥digo a ser executado
 }    */

 


 function imprimeSaudacao() {
   return 'ol√°, Mundo';
 }
  console.log(imprimeSaudacao());

// Aten√ß√£o: O return interrompe a execu√ß√£o da fun√ß√£o, isto √©, ao utilizar o return, qualquer c√≥digo abaixo dele dentro do mesmo bloco de c√≥digo n√£o vai ser executado. Observe:

  function imprimeSaudacao2() {
    const saudacao = 'Ol√°, Gisele!';
  
    console.log('Eu sou um console e vou aparecer!');
    return saudacao;
  
    console.log('Eu sou um console e n√£o vou aparecer üò≠!');
  }
  
  console.log(imprimeSaudacao2());

  // Anota a√≠ üì£ : A palavra return indica qual √© o retorno esperado e finaliza a execu√ß√£o da fun√ß√£o.

  // Par√¢metros
  // obs: Na declara√ß√£o da fun√ß√£o temos a palavra function, seguida do nome da fun√ß√£o e dos par√™nteses. S√£o eles que v√£o receber o par√¢metro. Observe como isso acontece:

  function imprimeSaudacao3(parametro) {
    return parametro;
  }

  console.log(imprimeSaudacao3('Oi! Eu sou um par√¢metro!'));
  console.log(imprimeSaudacao3('Ol√°! Bruno!'));

 //                            //                     //



  function imprimeSaudacao(nome) {
    const saudacao = 'Ol√°, ' + nome + '!';
    return saudacao;
  }
  
  console.log(imprimeSaudacao('Gisele'));

//                       //                          //



  function imprimeSaudacao(nome, sobrenome, ultimoNome) {
    const saudacao = 'Ol√°, ' + nome + ' '+ sobrenome + ' ' + ultimoNome + '!';
    return saudacao;
  }
  
  console.log(imprimeSaudacao('Bruno', 'Barbosa', 'Vicente'));

  //Aten√ß√£o: A ordem dos par√¢metros importa! Ou seja, se voc√™ declarou o nome como primeiro par√¢metro, ao chamar a fun√ß√£o, o valor a ser passado primeiro √© referente ao nome da pessoa.

  function imprimeSaudacao4(nome, segundoNome, ultimoNome, idade) {
    const saudacao = 'Ol√°! ' + nome + ' ' + segundoNome + ' ' + ultimoNome + '!';
    const exibeIdade = 'Voc√™ tem ' + idade + ' anos.';
    return saudacao + ' ' + exibeIdade;
  }

  const nomeDaPessoa = 'Bruno';
  const segundoNomeDaPessoa = 'Barbosa';
  const ultimoNomeDaPessoa = 'Vicente';

  console.log(imprimeSaudacao4(nomeDaPessoa, segundoNomeDaPessoa, ultimoNomeDaPessoa, 30));

//                                   ///                                             ///


function imprimeSaudacao(nome, sobrenome, idade){
    const saudacao = 'Ol√°, ' + nome + ' ' + sobrenome + '!';
    const exibeIdade = 'Voce tem ' + idade + ' anos.';
    return saudacao + ' ' + exibeIdade;
}
console.log(imprimeSaudacao('Carolina', 'Pizol', 28));
console.log(imprimeSaudacao('Bruno', 'Barbosa', 30));
console.log(imprimeSaudacao('Bebezinha', 'Vicente', 7))

//                   //                            //                            //


function calcularDespesas(luz, internet) {
    const despesaTotal = luz + internet;
    return 'Esse m√™s, a despesa foi de: R$ ' + despesaTotal;
}
console.log(calcularDespesas(230,152));

///                                 ///                                /// 

function clientePedido(numeroPedido) {
    
    if (numeroPedido === 1) {
       return 'Pizza de Calabresa';
    } else if (numeroPedido === 2) {
      return 'Pizza de Quatro Queijos';
    } else if (numeroPedido === 3) {
      return 'Pizza de Frango com Catupiry';
    } else if (numeroPedido === 4) {
     return 'Pizza de Brigadeiro';
    } else {
    return 'N√∫mero do pedido inv√°lido!';
    }
  }
console.log(clientePedido())

///                             ///                            ///



