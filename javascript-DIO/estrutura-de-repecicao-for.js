//Estrutura de repeti√ß√£o for - estrutura - for (express√£o inicial; condi√ß√£o a ser cumprida; atualiza√ß√£o da express√£o inicial) {
    // c√≥digo que ser√° repetido }

    //obs: express√£o inicial: in√≠cio do loop. Aqui, normalmente, declaramos uma vari√°vel, que ser√° o valor inicial a ser usado;
    //condi√ß√£o a ser cumprida: crit√©rio que vai parar o loop, caso a condi√ß√£o seja atendida;
    //atualiza√ß√£o da express√£o inicial: altera√ß√£o da vari√°vel utilizada na primeira express√£o, o que acontece a cada loop, at√© a condi√ß√£o ser atendida.

    //obs: Para nos referirmos a la√ßos de repeti√ß√£o (loops), podemos utilizar a palavra ‚Äòitera√ß√£o‚Äô, que significa ‚Äòrepeti√ß√£o‚Äô.

    //obs: Se voc√™ declarar a vari√°vel utilizando const, ela n√£o poder√° ser alterada e o seu for n√£o vai funcionar da forma esperada.

    //obs: Voc√™ pode nomear essa vari√°vel do jeito que preferir, por√©m √© uma boa pr√°tica cham√°-la de index (√≠ndice), j√° que a itera√ß√£o acontece pelo index do array.

    //obs:  Voc√™ tamb√©m pode usar o operador de decremento --. Ele vai ter o mesmo efeito que index = index - 1. Ficaria da seguinte forma: --index. Mas tenha aten√ß√£o: esse operador tira apenas uma unidade do n√∫mero!

    
    for (let index = 10; index >= 1; --index) {  
        console.log(index);
}
console.log('UHULLLLLLLLLLLLLLLLLLLL FELIZ ANO NOVOOOOOOOO üçæüéÜüéÜ‚ú®');

/*O for funciona da seguinte forma:

Primeiro passo: Inicia o loop, declarando a vari√°vel index com o valor 10;

Segundo passo: A condi√ß√£o a ser verificada √© se o index √© maior ou igual a 1;

Terceiro passo: Se a condi√ß√£o verificada for verdadeira, ou seja, o valor de index ser maior ou igual a 1, ent√£o o console.log(index) √© executado;

Quarto passo: Ap√≥s a execu√ß√£o do console.log, o valor do index √© decrementado; Ap√≥s o decremento do index, √© verificada a condi√ß√£o a ser cumprida novamente, ou seja, se o index √© maior ou igual a 1.

Quinto passo: Quando a condi√ß√£o a ser cumprida for falsa, nesse caso quando o index for menor que 1, ent√£o o loop √© finalizado e o restante do c√≥digo √© executado.

Voc√™ conseguiu fazer o seu primeiro for!!*/

//ex:
//obs:O carrinho come√ßa vazio, vamos adicionar itens nele durante o for.

//obs: Quando posicaoNaLista for igual ao tamanho do array listaDeCompras, a condi√ß√£o √© falsa e o for para. Dessa forma vamos conseguir pegar todos os itens da lista de compras.

//obs: Para pegar o tamanho de um array, use o .length. 

//obs: √â poss√≠vel usar o operador de incremento ++ em substitui√ß√£o √† estrutura posicaoNaLista = posicaoNaLista + 1, ficando da seguinte forma: ++ posicaoNaLista. Mas esse operador adiciona somente uma unidade ao n√∫mero.


const listaDeCompras = ['ma√ß√£','gengibre','miojo','biscoito/bolacha','banana','feij√£o carioquinha','pasta de dente',]; // itens para comprar
const carrinho = []; // array vazio que ir√° receber os itens da vari√°vel listaDeCompras

for (let posicaoNaLista = 0; posicaoNaLista < listaDeCompras.length; ++posicaoNaLista) {
    if (listaDeCompras[posicaoNaLista] ==='ma√ß√£' || listaDeCompras[posicaoNaLista] ==='banana') {
        carrinho.push(listaDeCompras[posicaoNaLista]);
    }

}
console.log(carrinho);


let numero = 7
for (let contador = 1; contador <= 10; ++contador) {
    console.log(numero * contador);
}


//Utilizando duas estruturas de repeti√ß√£o for aninhadas

//obs:Tamb√©m ser√° necess√°ria uma lista para armazenar as amizades em comum

//obs:N√£o se esque√ßa de utilizar o console.log() na vari√°vel amizadesEmComum para verificar se tudo deu certo mesmo üòÖ.

const amizadesDaJuliana = ['Erickson', 'Cleyton', 'Laura', 'Claudio', 'Sheila', 'Vinicius', 'Leticia'];
const amizadesDoAdilson = ['Leticia', 'Guilherme', 'Cleyton', 'Ivan', 'Vinicius', 'Gisele'];
const amizadesEmComum = [];

for (indexDaJuliana = 0; indexDaJuliana < amizadesDaJuliana.length; ++indexDaJuliana) {
   for (let indexDoAdilson = 0; indexDoAdilson < amizadesDoAdilson.length; ++indexDoAdilson){
        if (amizadesDaJuliana[indexDaJuliana] === amizadesDoAdilson[indexDoAdilson]) {
            amizadesEmComum.push(amizadesDoAdilson[indexDoAdilson]);
        }  
     }
}
console.log(amizadesEmComum);

const nomes = ['Jo√£o', 'Lucas', 'Juliana', 'Amanda', 'Guilherme'];
let maiorNome = '';

for (let index = 0; index < nomes.length; index = index + 1) {
  if (nomes[index].length < maiorNome.length) {
    maiorNome = nomes[index];
  }
}
console.log(maiorNome);






function mediaDosNumeros(arrayNumeros) {
    let soma = 0;
    let media = 0;

    for (let index = 0; index < arrayNumeros.length; index = index + 1) {
        soma = soma + arrayNumeros[index];
     }
    media = soma / arrayNumeros.length;
    return media;  
  }


  function imprimeItens(array) {
    for (let index = 0; index < array.length; index = index + 1) {
      console.log(array[index]);
    }
  }
c





